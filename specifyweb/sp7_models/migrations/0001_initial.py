# Generated by Django 3.2.15 on 2024-06-21 21:56

from django.db import migrations, models
from django.db.models import Subquery, OuterRef
import django.db.models.deletion
import django.utils.timezone
import specifyweb.specify.models
from specifyweb.specify.models import Taxontreedef, Taxontreedefitem, Discipline, Collectionobject
from specifyweb.sp7_models.models import CollectionObjectType


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('specify', '__first__'),
    ]

    def add_new_default_taxon_trees(apps, schema_editor):
        TAXON_TREES = ["Mineral", "Rock", "Meteorite", "Fossil"]
        TAXON_RANKS = ["Root", "One", "Two", "Three"]
        for tree in TAXON_TREES:
            if Taxontreedef.objects.filter(name=tree).exists():
                continue
            tree_name = f"{tree} Taxon"
            ttd = Taxontreedef.objects.create(name=tree_name)
            ttd.save()
            rank_id = 0
            ttdi = None
            for rank in TAXON_RANKS:
                name = f"{tree} {rank}"
                rank_id += 10
                ttdi = Taxontreedefitem.objects.create(
                    name=name,
                    title=name,
                    rankid=rank_id,
                    parent=ttdi,
                    treedef=ttd,
                )
                ttdi.save()

    def remove_new_default_taxon_trees(apps, schema_editor):
        TAXON_TREES = ["Mineral", "Rock", "Meteorite", "Fossil"]
        TAXON_RANKS = ["One", "Two", "Three"]

        for tree in reversed(TAXON_TREES):
            tree_name = f"{tree} Taxon"
            ttd = Taxontreedef.objects.filter(name=tree_name)
            if ttd.exists():
                for rank in reversed(TAXON_RANKS):
                    name = f"{tree} {rank}"
                    ttdi = Taxontreedefitem.objects.filter(
                        name=name, treedef=ttd.first()
                    )
                    if ttdi.exists():
                        try:
                            ttdi.delete()
                        except Exception as e:
                            print(f"Error deleting taxontreedefitem {name}: {e}")
                            continue
                # Delete the TaxonTreeDefItem with name f"{tree} Root" with sql rather than Django ORM
                with schema_editor.connection.cursor() as cursor:
                    cursor.execute(
                        f"DELETE FROM taxontreedefitem WHERE Name = '{tree} Root'"
                    )
                try:
                    ttd.delete()
                except Exception as e:
                    print(f"Error deleting taxontreedef {tree_name}: {e}")
                    continue

    def create_default_collection_types(apps, schema_editor):
        # Create default collection types for each discipline
        for discipline in Discipline.objects.all():
            name = discipline.name
            if CollectionObjectType.objects.filter(name=name).exists():
                continue
            cot = CollectionObjectType.objects.create(
                name=name,
                isdefault=True,
                collection=discipline.collection,
                taxontreedef=discipline.taxontreedef,
            )
            cot.save()

        # The default collection object type for each collection type is the name of the discipline
        # Solution 1: Iteratively update each CollectionObject's collectionobjecttype
        # by fetching the corresponding CollectionObjectType
        # for co in Collectionobject.objects.all():
        #     discipline = co.collection.discipline
        #     name = discipline.name
        #     if CollectionObjectType.objects.filter(name=name).exists():
        #         co.collectionobjecttype = CollectionObjectType.objects.get(name=name)
        #         co.save()

        # Solution 2: Iteratively update CollectionObjects' collectionobjecttype
        # for each discipline in a bulk operation
        for discipline in Discipline.objects.all():
            name = discipline.name
            cot = CollectionObjectType.objects.get(name=name)
            (Collectionobject.objects
                .filter(collection__discipline=discipline)
                .update(collectionobjecttype=cot))

        # Solution 3: Update all CollectionObjects' collectionobjecttype using a
        # subquery to fetch the corresponding CollectionObjectType
        # cot_subquery = CollectionObjectType.objects.filter(
        #     name=OuterRef("collection__discipline__name")
        # ).values("id")[:1]
        # CollectionObject.objects.update(collectionobjecttype_id=Subquery(cot_subquery))

    def revert_default_collection_types(apps, schema_editor):
        # TODO: Fix this rever migration, and fix the ordering
        # Delete all default collection types
        CollectionObjectType.objects.filter(isdefault=True).delete()

        # Reset all CollectionObject's collectionobjecttype to None
        Collectionobject.objects.update(collectionobjecttype=None)

    operations = [
        migrations.CreateModel(
            name='CollectionObjectGroup',
            fields=[
                ('id', models.AutoField(db_column='collectionobjectgroupid', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=255, null=True)),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
                ('igsn', models.CharField(blank=True, db_column='IGSN', max_length=255, null=True)),
                ('guid', models.CharField(blank=True, db_column='GUID', max_length=255, null=True)),
                ('number1', models.SmallIntegerField(blank=True, db_column='Number1', null=True)),
                ('version', models.IntegerField(blank=True, db_column='Version', default=0, null=True)),
                ('timestampcreated', models.DateTimeField(db_column='TimestampCreated', default=django.utils.timezone.now)),
                ('timestampmodified', models.DateTimeField(blank=True, db_column='TimestampModified', default=django.utils.timezone.now, null=True)),
                ('text1', models.TextField(blank=True, db_column='Text1', null=True)),
                ('text2', models.TextField(blank=True, db_column='Text2', null=True)),
                ('text3', models.TextField(blank=True, db_column='Text3', null=True)),
                ('collection', models.ForeignKey(db_column='CollectionID', on_delete=specifyweb.specify.models.protect_with_blockers, related_name='collectionobjectgroups', to='specify.collection')),
                ('createdbyagent', models.ForeignKey(db_column='CreatedByAgentID', null=True, on_delete=specifyweb.specify.models.protect_with_blockers, related_name='+', to='specify.agent')),
                ('modifiedbyagent', models.ForeignKey(db_column='ModifiedByAgentID', null=True, on_delete=specifyweb.specify.models.protect_with_blockers, related_name='+', to='specify.agent')),
            ],
            options={
                'db_table': 'collectionobjectgroup',
                'ordering': (),
            },
        ),
        migrations.CreateModel(
            name='CollectionObjectType',
            fields=[
                ('id', models.AutoField(db_column='CollectionObjectTypeID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=255)),
                ('isloanable', models.BooleanField(blank=True, db_column='IsLoanable', null=True)),
                ('isdefault', models.BooleanField(blank=True, db_column='IsDefault', null=False, default=False)),
                ('version', models.IntegerField(blank=True, db_column='Version', default=0, null=True)),
                ('timestampcreated', models.DateTimeField(db_column='TimestampCreated', default=django.utils.timezone.now)),
                ('timestampmodified', models.DateTimeField(blank=True, db_column='TimestampModified', default=django.utils.timezone.now, null=True)),
                ('text1', models.TextField(blank=True, db_column='Text1', null=True)),
                ('text2', models.TextField(blank=True, db_column='Text2', null=True)),
                ('text3', models.TextField(blank=True, db_column='Text3', null=True)),
                ('collection', models.ForeignKey(db_column='CollectionID', on_delete=specifyweb.specify.models.protect_with_blockers, related_name='collectionobjecttypes', to='specify.collection')),
                ('createdbyagent', models.ForeignKey(db_column='CreatedByAgentID', null=True, on_delete=specifyweb.specify.models.protect_with_blockers, related_name='+', to='specify.agent')),
                ('modifiedbyagent', models.ForeignKey(db_column='ModifiedByAgentID', null=True, on_delete=specifyweb.specify.models.protect_with_blockers, related_name='+', to='specify.agent')),
                ('taxontreedef', models.ForeignKey(db_column='TaxonTreeDefID', on_delete=specifyweb.specify.models.protect_with_blockers, related_name='collectionobjecttypes', to='specify.taxontreedef')),
            ],
            options={
                'db_table': 'collectionobjecttype',
                'ordering': (),
                'unique_together': (('collection', 'isdefault'),),
            },
        ),
        migrations.CreateModel(
            name='CollectionObjectGroupJoin',
            fields=[
                ('id', models.AutoField(db_column='collectionobjectgroupjoinid', primary_key=True, serialize=False)),
                ('isprimary', models.BooleanField(blank=True, db_column='IsPrimary', null=True)),
                ('issubstrate', models.BooleanField(blank=True, db_column='IsSubstrate', null=True)),
                ('precedence', models.SmallIntegerField(blank=True, db_column='Precedence', null=True)),
                ('order', models.SmallIntegerField(blank=True, db_column='Order', null=True)),
                ('version', models.IntegerField(blank=True, db_column='Version', default=0, null=True)),
                ('timestampcreated', models.DateTimeField(db_column='TimestampCreated', default=django.utils.timezone.now)),
                ('timestampmodified', models.DateTimeField(blank=True, db_column='TimestampModified', default=django.utils.timezone.now, null=True)),
                ('text1', models.TextField(blank=True, db_column='Text1', null=True)),
                ('text2', models.TextField(blank=True, db_column='Text2', null=True)),
                ('text3', models.TextField(blank=True, db_column='Text3', null=True)),
                ('child', models.ForeignKey(db_column='ChildID', on_delete=django.db.models.deletion.CASCADE, related_name='cojos', to='specify.collectionobject')),
                ('parent', models.ForeignKey(db_column='ParentID', on_delete=django.db.models.deletion.CASCADE, related_name='cojos', to='sp7_models.collectionobjectgroup')),
            ],
            options={
                'db_table': 'collectionobjectgroupjoin',
                'ordering': (),
            },
        ),
        migrations.RunSQL(
            # Add hasreferencecatalognumber fields to CollectionObject
            # Add CoTypeID foreign key to CollectionObject
            """
            ALTER TABLE collectionobject
            ADD COLUMN HasReferenceCatalogNumber bit(1) DEFAULT 0 NOT NULL;
            ALTER TABLE collectionobject
            ADD COLUMN CoTypeID int;
            """,
            # Remove hasreferencecatalognumber fields from CollectionObject when unapplying migration
            reverse_sql="""
            ALTER TABLE collectionobject
            DROP COLUMN HasReferenceCatalogNumber;
            ALTER TABLE collectionobject
            DROP COLUMN CoTypeID;
            """
        ),
        # migrations.AddField( # This doesn't work right now because CollectionObject is in the specify django app
        #     model_name='ColllectionObject',
        #     name='ismemberofcog',
        #     field=models.BooleanField(blank=True, null=True, unique=False, db_column='IsMemberOfCog', db_index=False),
        #     preserve_default=False,
        # ),
        # migrations.RunPython(
        #     # Add ismemberofcog field to CollectionObject
        #     lambda apps, schema_editor: apps.get_model(
        #         "specify", "CollectionObject"
        #     ).add_to_class(
        #         "ismemberofcog",
        #         models.BooleanField(
        #             blank=True,
        #             null=True,
        #             unique=False,
        #             db_column="IsMemberOfCog",
        #             default=False,
        #             db_index=False,
        #         ),
        #     ),
        #     # Remove ismemberofcog field from CollectionObject when unapplying migration
        #     lambda apps, schema_editor: apps.get_model(
        #         "specify", "CollectionObject"
        #     ).remove_from_class("ismemberofcog"),
        # ),
        migrations.RunPython(
            add_new_default_taxon_trees,
            reverse_code=remove_new_default_taxon_trees
        ),
        migrations.RunPython(
            create_default_collection_types,
            reverse_code=revert_default_collection_types
        )
    ]
