import React from 'react';

import { fetchCollection } from '../collection';
import { commonText } from '../localization/common';
import { formsText } from '../localization/forms';
import { schema } from '../schema';
import type { SpecifyModel } from '../specifymodel';
import { Button, Input, Label, Link } from './basic';
import { useAsyncState, useBooleanState } from './hooks';
import { Dialog } from './modaldialog';
import { useCachedState } from './statecache';

export function FormDefinition({
  model,
}: {
  readonly model: SpecifyModel;
}): JSX.Element {
  const [isOpen, handleOpen, handleClose] = useBooleanState();
  return (
    <>
      <Button.Simple onClick={handleOpen}>
        {commonText('formDefinition')}
      </Button.Simple>
      {isOpen && <FormDefinitionDialog model={model} onClose={handleClose} />}
    </>
  );
}

function FormDefinitionDialog({
  model,
  onClose: handleClose,
}: {
  readonly model: SpecifyModel;
  readonly onClose: () => void;
}): JSX.Element {
  const [globalConfig = {}, setGlobalConfig] = useCachedState({
    category: 'forms',
    key: 'useCustomForm',
    defaultValue: {},
    staleWhileRefresh: false,
  });
  const useCustomForm = globalConfig[model.name] ?? true;
  const handleChange = (checked: boolean): void =>
    setGlobalConfig({ ...globalConfig, [model.name]: !checked });

  const viewDefinitionLink = useFormDefinition();

  return (
    <Dialog
      header={commonText('formDefinition')}
      buttons={commonText('close')}
      onClose={handleClose}
    >
      <Label.ForCheckbox>
        <Input.Checkbox checked={!useCustomForm} onValueChange={handleChange} />
        {formsText('useAutoGeneratedForm')}
      </Label.ForCheckbox>
      {typeof viewDefinitionLink === 'string' && (
        <Link.NewTab href={viewDefinitionLink}>
          {formsText('editFormDefinition')}
        </Link.NewTab>
      )}
    </Dialog>
  );
}

/*
 * BUG: this assumes that the ViewSet for current collection was the one used
 *   to render this form. That is not always the case.
 */
function useFormDefinition(): string | undefined {
  const [url] = useAsyncState(
    React.useCallback(
      async () =>
        fetchCollection(
          'SpViewSetObj',
          {
            limit: 1,
          },
          {
            spAppResourceDir__Collection: schema.domainLevelIds.collection,
          }
        )
          .then(({ records }) => records[0]?.id)
          .then((id) =>
            typeof id === 'number' ? `/specify/viewsets/${id}/` : undefined
          ),
      []
    ),
    false
  );
  return url;
}
