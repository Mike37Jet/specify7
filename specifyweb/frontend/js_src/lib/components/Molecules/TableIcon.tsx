import React from 'react';

import { commonText } from '../../localization/common';
import { spanNumber } from '../../utils/utils';
import { icons } from '../Atoms/Icons';
import { getModel } from '../DataModel/schema';
import { getIcon } from '../InitialContext/icons';

const MAX_HUE = 360;

/**
 * Convert first 2 characters of a table name to a number [0,255] corresponding
 * to color hue.
 *
 * Used for autogenerated table icons if table icon image is missing.
 */
const getHue = spanNumber(
  // eslint-disable-next-line unicorn/prefer-code-point
  'a'.charCodeAt(0) * 2,
  // eslint-disable-next-line unicorn/prefer-code-point
  'z'.charCodeAt(0) * 2,
  0,
  MAX_HUE
);

/** Generate an HSL color based on the first 2 characters of a string */
export function stringToColor(rawName: string): string {
  const name = rawName.toLowerCase();
  return `hsl(${getHue(
    // eslint-disable-next-line unicorn/prefer-code-point
    (name[0] ?? 'a').charCodeAt(0) + (name[1] ?? 'a').charCodeAt(0)
  )}, 70%, 50%)`;
}

/**
 * Renders a table icon or autogenerates a new one
 */
export function TableIcon({
  name,
  label,
  /**
   * It is highly recommended to use the same icon size everywhere, as that
   * improves consistency, thus, this should be overwritten only if it is
   * strictly necessary.
   */
  className = 'w-table-icon h-table-icon flex-shrink-0',
}: {
  readonly name: string;
  /**
   * Set this to false only if icon would be rendered adjacent to the table name.
   * In all other cases, set this to true, or explicitly set the label as a
   * string
   */
  readonly label: boolean | string;
  readonly className?: string;
}): JSX.Element {
  const tableIconSource = getIcon(name);
  const resolvedTableLabel =
    label === false
      ? undefined
      : typeof label === 'string'
      ? label
      : getModel(name)?.label ?? '';
  const role = typeof resolvedTableLabel === 'string' ? 'img' : undefined;
  const ariaHidden = resolvedTableLabel === undefined;
  if (typeof tableIconSource === 'string')
    return (
      <span
        aria-hidden={ariaHidden}
        aria-label={typeof role === 'string' ? resolvedTableLabel : undefined}
        className={`${className} bg-contain bg-center bg-no-repeat`}
        role={role}
        style={{ backgroundImage: `url('${tableIconSource}')` }}
        title={resolvedTableLabel}
      />
    );

  // If icon is missing, show an autogenerated one:
  return (
    <span
      aria-hidden={ariaHidden}
      aria-label={resolvedTableLabel}
      className={`
        flex h-table-icon w-table-icon items-center justify-center
        rounded-sm text-sm text-white
      `}
      role={role}
      style={{ backgroundColor: stringToColor(name) }}
      title={resolvedTableLabel}
    >
      {name.slice(0, 2).toUpperCase()}
    </span>
  );
}

export const tableIconUndefined = (
  <span
    aria-label={commonText.unmapped()}
    className={`
      flex h-table-icon w-table-icon items-center justify-center font-bold
      text-red-600
    `}
    role="img"
  >
    {icons.ban}
  </span>
);

export const tableIconSelected = (
  <span
    aria-label={commonText.mapped()}
    className={`
      flex h-table-icon w-table-icon items-center justify-center font-bold
      text-green-500
    `}
    role="img"
  >
    {icons.check}
  </span>
);

export const tableIconEmpty = (
  <span aria-hidden className="h-table-icon w-table-icon" />
);
