from typing import NamedTuple, List, Dict

from jsonschema import validate # type: ignore


schema = {
    'title': 'Specify 7 Workbench Row Validation',
    'description': 'Reports validation results with regard to a dataset row.',
    "$schema": "http://json-schema.org/schema#",

    'type': 'object',
    'properties': {
        'cellIssues': {
            'type': 'array',
            'description': 'List of of validation issues that can be attributed to a particular cell.',
            'items': {
                'type': 'object',
                'properties': {
                    'column': { 'type': 'string', 'description': 'The dataset column name.' },
                    'issue': { 'type': 'string', 'description': 'Description of the issue.'}
                },
                'required': ['column', 'issue'],
                'additionalProperties': False
            }
        },
        'tableIssues': {
            'type': 'array',
            'description': 'List of table level issues.',
            'items': {
                'type': 'object',
                'properties': {
                    'tableName': { 'type': 'string', 'description': 'The name of the table that has the issue.' },
                    'columns': {
                        'type': 'array',
                        'description': 'The dataset columns that are mapped to the table.',
                        'items': { 'type': 'string' }
                    },
                    'issue': { 'type': 'string', 'description': 'Description of the issue.' }
                },
                'required': ['tableName', 'columns', 'issue'],
                'additionalProperties': False
            }
        },
        'newRows': {
            'type': 'array',
            'description': 'List of new records generated by uploading the row.',
            'items': {
                'type': 'object',
                'properties': {
                    'tableName': { 'type': 'string', 'description': 'The name of the table that contains the new row.'},
                    'columns': {
                        'type': 'array',
                        'description': 'The dataset columns that are mapped to the table.',
                        'items': { 'type': 'string' }
                    },
                    'id': { 'type': 'integer', 'description': 'The row id of the new row.' }
                },
                'required': ['tableName', 'columns', 'id'],
                'additionalProperties': False
            }
        },
        'picklistAdditions': {
            'type': 'array',
            'description': 'List of items added to nonreadonly picklists.',
            'items': {
                'type': 'object',
                'properties': {
                    'name': { 'type': 'string', 'descripition': 'The name of the picklist that received a new item.' },
                    'value': { 'type': 'string', 'description': 'The value that was added to the picklist.' },
                    'column': { 'type': 'string', 'description': 'The column in which the new value occured.' },
                    'id': { 'type': 'integer', 'description': 'The id of the new picklist item.' },
                    },
                'required': ['name', 'value', 'column', 'id'],
                'additionalProperties': False
            }
        },
    },
    'required': ['cellIssues', 'tableIssues', 'newRows', 'picklistAdditions'],
    'additionalProperties': False
}

class CellIssue(NamedTuple):
    column: str
    issue: str

class TableIssue(NamedTuple):
    tableName: str
    columns: List[str]
    issue: str

class NewRow(NamedTuple):
    tableName: str
    columns: List[str]
    id: int

class NewPicklistItem(NamedTuple):
    name: str
    value: str
    column: str
    id: int


class RowValidation(NamedTuple):
    cellIssues: List[CellIssue]
    tableIssues: List[TableIssue]
    newRows: List[NewRow]
    picklistAdditions: List[NewPicklistItem]

    def to_json(self) -> Dict:
        result = dict(
            cellIssues=[i._asdict() for i in self.cellIssues],
            tableIssues=[i._asdict() for i in self.tableIssues],
            newRows=[i._asdict() for i in self.newRows],
            picklistAdditions=[i._asdict() for i in self.picklistAdditions],
        )
        validate(result, schema)
        return result
